
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys.js');
const mongoose = require('mongoose');

const User = mongoose.model('users');

// Generates cookie. This function is used to serialize the user id for the session
// This stores the id generated by mongo (_id), for example "$oid":"5ef115b0214654c2e64e8da1"
passport.serializeUser((user, done) => {  
  done(null, user.id); 
});

// Used to deserialize the user from cookie user id
// Once this function is executed, the user object is attached to the request as req.user 
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user); 
   })
});

// CallbackURL is the url the user will be send to, once he grants permissions
passport.use(
  new GoogleStrategy(
      {
          clientID: keys.googleClientID,
          clientSecret: keys.googleClientSecret,
          callbackURL: '/auth/google/callback'
      }, 
      // This callback function is triggered once the user is authenticated by google and then redirected to our application
      (accessToken, refreshToken, profile, done) => {
        User.findOne({googleId: profile.id}).then(exsistingUser => {
          if (exsistingUser) {
            // Skip user creation. The first argument indicates if an error has ocurred, so if it is null, we assumed that everything succeded
            console.log('usuario encontrado - id: ', profile.id);
            // "done" is a specific method of passport 
            done(null, exsistingUser);
          } else {
            new User({ googleId: profile.id })
              .save()
              .then(user => { 
                console.log('usuario creado - id: ', profile.id);
                done(null, user);
              });
          }
        });
      }
  )
);
